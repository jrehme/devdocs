<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Shopware Developers]]></title>
    <link href="https://developers.shopware.com/atom.xml" rel="self"/>
    <link href="https://developers.shopware.com/"/>
    <updated>2017-11-28T09:22:48+00:00</updated>
    <id>https://developers.shopware.com/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
        <entry>
        <title type="html"><![CDATA[On testing strategies]]></title>
        <link href="https://developers.shopware.com/blog/2017/11/17/on-testing-strategies"/>
        <updated>2017-11-17T00:00:00+00:00</updated>
        <id>https://developers.shopware.com/blog/2017/11/17/on-testing-strategies</id>
        <content type="html"><![CDATA[<p>In this post I want to introduce you to the kind of strategies we evaluated to secure the functionality of the Shopware B2B-Suite.</p>

<p>When we set of to write the B2B-Suite we as a team set a few technical goals we wanted to achieve. One of them was to embrace automatic testing at its fullest and harness the potential implied by it:</p>

<ul>
<li>Allow refactoring even a day before release</li>
<li>Help instill trust into the stability of the application for our customers</li>
<li>Create a good application architecture that feels about right for the complexity introduced</li>
</ul>

<h2>The Application</h2>

<p>First we take a look at a fairly standard application design. We need this to have a shared base for the comparision of the different testing strategies. This model omits the framework and data structures which are not essential for our evaluation.</p>

<p>We have a controller, that uses a domain service and two auxiliary services to handle requests. The services themselves have dependencies on other services or storage implementations.</p>

<p><img src="/blog/img/advantages-of-integration-testing/standard-application.svg" /></p>

<p>So how should we test this? Let's discuss some strategies:</p>

<h2>Testing Strategy: Functional testing only</h2>

<p>Many projects out there use acceptance tests as their only way of automated testing. So why is it a bad idea? One word: Performance! Functional tests use a real browser to check the application. Even high performance applications have response times of at least 50ms, excluding the JavaScript execution time you are quickly at 500ms or more - for a <strong>single page</strong>. So let's math with an average of 250ms per page:</p>

<table>
<thead>
<tr>
<th>Page Loads</th>
<th>Time</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>250 ms</td>
</tr>
<tr>
<td>5</td>
<td>1 min</td>
</tr>
<tr>
<td>10</td>
<td>2 min</td>
</tr>
<tr>
<td>50</td>
<td>10 min</td>
</tr>
<tr>
<td>100</td>
<td>20 min</td>
</tr>
<tr>
<td>400</td>
<td>1 hr</td>
</tr>
</tbody>
</table>

<p>Now you have to ask yourself: Do you want to maintain this? Is it useful? Creating an application that has 400 different click paths is quite easy, but waiting an hour to validate every single change is tedious at least and at worst it stops being helpful quickly.</p>

<p>The main advantage is that - at least for settled applications - introducing testing late in a development flow makes this a quick win because usually you have to write the least amount of code for this. And even if the Structure of your source code does not allow to easily introduce testing into every layer, these tests at least tend to solidify the basic functionality. So this is possible by just introducing a single layer on top of your application:</p>

<p><img src="/blog/img/advantages-of-integration-testing/application-functional-testing.svg" /></p>

<p><strong>Good:</strong></p>

<ul>
<li>Gives you 99% certainty that the application works correctly.</li>
<li>Adds minimal code to maintain.</li>
</ul>

<p><strong>Bad:</strong></p>

<ul>
<li>Takes a long time even for small applications</li>
<li>Does not help developers</li>
<li>Does nothing to your application architecture, but add a few css classes</li>
<li>Usually very fragile, small changes tend to have an unreasonably big impact (you change a buttons position and the login breaks)</li>
</ul>

<p><strong>Verdict:</strong> Run!</p>

<h2>Testing Strategy: The Pyramid</h2>

<p>There is a testing pyramid favored by people like Robert C. Martin, it looks like this:</p>

<p><img src="/blog/img/advantages-of-integration-testing/unit-test-pyramid.svg" /></p>

<p>&quot;A Testing Pyramid that puts the focus on <strong>unit tests</strong> proposes to write a few integration tests and if really necessary few functional test. So for our example application this looks like this:</p>

<p><img src="/blog/img/advantages-of-integration-testing/standard-application-with-pyramid.svg" /></p>

<p>So what do we have here? We have a Unit Test for each class of the application. Each dependency is mocked so we can test the code of a single service in absolute isolation. This is the core of your test suite: The unit tests! Now we need to integrate in a few places, I personally would propose that <code>MyService</code> and <code>ContextProvider</code> should be integrated with their subsidiary services, so we add this:</p>

<p><img src="/blog/img/advantages-of-integration-testing/standard-application-with-pyramid-integration.svg" /></p>

<p>These two integration tests that integrate the central services with their storage. Last but not least we have a small functional test for our controller.</p>

<p><img src="/blog/img/advantages-of-integration-testing/standard-application-with-pyramid-functional.svg" /></p>

<p>Pyramid successfully implemented!</p>

<p>But this did not work for us. Since we use minimal Integration tests and mock all outputs of the dependencies we quickly found ourselves in a place where the test suite did not produce certain edge cases correctly. Mocks are simply a lie in your system. Let's take a closer look at <code>MyServiceTest</code>:</p>

<p><img src="/blog/img/advantages-of-integration-testing/mocking-error.svg" /></p>

<p>The Problem is the dependency between the mocks and the actual implementations. Although one can connect them through a <em>realization</em> arrow, mocks treat real implementations like interfaces. So if the signature does not change, but the result itself changes over time a mock will not catch this error. And changing the result over time is quite easy:</p>

<p>At first a method might look like this:</p>

<pre><code class="language-php">public function isValidResponseCode(int $code): bool
{
    return in_array($code, [200, 300]);
}
</code></pre>

<p>And then gets changed to this:</p>

<pre><code class="language-php">public function isValidResponseCode(int $code): bool
{
    return in_array($code, [200, 300, 202, 303]);
}
</code></pre>

<p>Boom, a mock will never automatically produce this result, but for all means it will keep the test suite green. There are certain other problems with mocks, so... Time for an excurse:</p>

<hr />

<h2>Excurse: Mocking</h2>

<p>All I really can say about mocking is this: it is a pain in the ass! There are currently a few contenders for mocking in PHPUnit tests and they all work internally the same way and are kind of awful. So lets say we have a class called <code>Something</code> that has a method called <code>getResponse</code> and we want it to return <code>'foo'</code> for our test, how would we accomplish this through mocking?</p>

<pre><code class="language-php">class Something {
    public function getResponse(): string {
        return 'bar';
    }
}
</code></pre>

<h4>PHPUnit Mocks</h4>

<p>The default for PHPUnit Mocks is to use the built in Mocking Framework. This usually looks like this:</p>

<pre><code class="language-php">class SomeTest extends PHPUnit_Framework_TestCase {

    public function test_something()
    {
        // create a mock
        $stub = $this-&gt;createMock(Something::class);

        // Configure the mock
        $stub-&gt;method('getResponse')
             -&gt;willReturn('foo');

        $this-&gt;assertEquals('foo', $stub-&gt;getResponse());
    }
}
</code></pre>

<p>Cool? No! Actually there are a few problems with that:</p>

<ul>
<li>If you refactor the <code>getResponse</code> method no IDE will match this with this string automatically.</li>
<li>When you write this you have to remember what the <code>getResponse</code> Method was called. The IDE will not help you here.</li>
<li>
<code>'foo'</code> is a totally made up value. As you can see the real implementation is not able to create this value, so why is there a test that checks against impossible values?</li>
</ul>

<h4>Prophecy</h4>

<p>Prophecy is part of the newer generation of mocking frameworks. It has a two step approach, where you first configure the mock and then create the result. So how would this look like?</p>

<pre><code class="language-php">class SomeTest extends PHPUnit_Framework_TestCase {

    public function test_something()
    {
        // create a prophet
        $prophet = $this-&gt;prophesize(Something::class);

        // Configure the prophet
        $prophet-&gt;getResponse()
             -&gt;willReturn('foo');

        // create the mock
        $stub = $prophet-&gt;reveal();

        $this-&gt;assertEquals('foo', $stub-&gt;getResponse());
    }
}
</code></pre>

<p>Cool? A little bit cooler at least. It is possible to annotate the real class for prophets, at least. But other then that it has the same issues as <code>PHPUnit Mocks</code>.</p>

<h4>Just use PHP</h4>

<p>Of course we can create mocks with the built in features of the language itself. Just like this:</p>

<pre><code class="language-php">class SomeTest extends PHPUnit_Framework_TestCase {

    public function test_something()
    {
        // create a prophet
        $stub = new class extends Something {
            public function getResponse(): string {
                return 'foo';
            }
        };

        $this-&gt;assertEquals('foo', $stub-&gt;getResponse());
    }
}
</code></pre>

<p>Although this is by far my favorite approach because the IDE can help you best with this approach, it still is messy.</p>

<p><strong>It is impossible to get <code>foo</code> as a return value from the tested method</strong> This means that tests with Mocks tend to use made up values that can diverge quite heavily from real data.</p>

<hr />

<p>So how did the pyramid fair for us?</p>

<p><strong>Good:</strong></p>

<ul>
<li>Helps during development, creates entry points for every possible error</li>
<li>Always fast to execute</li>
<li>Creates extremely well designed classes</li>
</ul>

<p><strong>Bad:</strong></p>

<ul>
<li>Almost doubles the amount of code in your project</li>
<li>Mocks need to be changed in sync with their loosely coupled subjects</li>
<li>Produces false positives</li>
<li>Creates sometimes awkward to integrate classes</li>
</ul>

<p><strong>Verdict:</strong> Can be better...</p>

<h2>Testing Strategy: The Diamond</h2>

<p>There is a third strategy, that puts all the effort into Integration tests. This looks something like that:</p>

<p><img src="/blog/img/advantages-of-integration-testing/test-diamond.svg" /></p>

<p>I have color coded the application diagram to show you how we interpreted the diamond:</p>

<ul>
<li>
<strong>Green:</strong> No dependencies, a test becomes automatically a <strong>unit test</strong>
</li>
<li>
<strong>Yellow:</strong> Has dependencies (either on other classes, or on infrastructure) must be an <strong>integration test</strong>
</li>
<li>
<strong>Blue:</strong> Is front facing so it must be a <strong>functional test</strong>
</li>
</ul>

<p><img src="/blog/img/advantages-of-integration-testing/application-diamond-testing.svg" /></p>

<p>By applying this simple ruleset we still have a one to one parity of test classes to production classes. This means that for each bug or feature there is an easy entry point in our test suite. And the test suite is therefore useful for developers and gets actively supported. If bugs are introduced during development there is usually a test that shows it immediately. If a contract between objects is changed this change is immediately available in the suite and in many cases even leads to a failing test. (depending on the test quality: see <a href="https://developers.shopware.com/blog/2017/08/24/mutation-testing/">Mutation Testing by my colleague Thomas Eiling</a>).</p>

<p>So now let's take a look at our <code>MyServiceTest</code> the way it looks like in integration testing:</p>

<p><img src="/blog/img/advantages-of-integration-testing/my-service-integration-test.svg" /></p>

<p>This test still covers all n-paths of the class <code>MyService</code>! It covers most paths in it's directly dependant classes <code>MyRepository</code> and <code>ValidationService</code> and covers a few paths in their dependencies, and so on. You can imagine this like different saturations of a color:</p>

<p><img src="/blog/img/advantages-of-integration-testing/my-service-integration-test-with-saturation.svg" /></p>

<p>Now we no longer make up the output of any subsidiary service. We even noticed that using the real storage has virtually no impact on the test performance, but creates a huge benefit by testing the friction between these different services in our test suite at all times <a href="https://12factor.net/dev-prod-parity">(see factor X)</a>.</p>

<p>The big picture then looks like this:</p>

<p><img src="/blog/img/advantages-of-integration-testing/standard-application-with-diamond.svg" /></p>

<p>The mocks in this case come from a specially set up database and this is the only real downside to this approach. Your fixtures may diverge from a production setting! We have seen this in the past and usually got real bugs from this. But even in these cases the problem arose from a single point of failure which is far better then mocking in every single place.</p>

<p><strong>Good:</strong></p>

<ul>
<li>Helps during development, creates entry points for every possible error</li>
<li>Almost as fast as unit tests</li>
<li>The real data is used</li>
<li>Creates an architecture of well integrated parts</li>
</ul>

<p><strong>Bad:</strong></p>

<ul>
<li>Almost doubles the amount of code in your project</li>
<li>Fixture data will never show 100% production state</li>
<li>Will also not give you a 100% certainty that everything works</li>
</ul>

<p><strong>Verdict:</strong> We use it!</p>

<h2>A word on TDD</h2>

<p>I personally am a huge fan of TDD and practice it almost always when developing or exploring software. This practice is not lost here. Just because you have to implement stuff that you are using does not reduce the amount of freedom you have in the 30 second cycle of test driven development. On the contrary - at least for me - it tends to create more realistic assumptions on the scope of classes. By doing almost only integration testing all my tests look and feel the same. The usual friction that occurs when combining multiple unit tested classes is by far reduced because the integration assumptions all - by definition - hold up against the real implementations.</p>

<h2>Conclusion</h2>

<p>The Diamond seems to be the best solution to the testing strategy problem. In fact we have been and still are developing the B2B-Suite with that strategy in mind and have seen quite good results with it. Currently our complete suite takes around 3 minutes to execute which is still passable for a quick overview. None of our tests depend on its predecessor and can all be executed in isolation (which makes Mutation testing possible in the first place), so during development we usually single out a few tests to run repeatedly.</p>

<p>The issue of software architecture comes a little short in this blog post, let me tell you why: It is a problem where tests only are a part of the solution! As you could read in a <a href="https://developers.shopware.com/blog/2016/12/05/large-scale-plugin-architecture/">previous post I published</a> where I used the actor model to create a plugin architecture there are numerous ways that need to be taken into account when creating a sustainable system architecture. Testing will help you a lot with <em>friction</em> and <em>cohesion</em> (as introduced by Robert C. Martin) but not help you derive a greater truth from this. This is a place where <a href="https://en.wikipedia.org/wiki/Domain-driven_design">DDD</a> seems to provide the better tools.</p>

<p>So all in all, at least to us this is the best overall approach to develop stable software, with the least tradeoffs and the most benefits. Thanks for reading and as always feel free to get in touch and discuss with me!</p>
]]></content>
    </entry>
        <entry>
        <title type="html"><![CDATA[Exclusive Enterprise Developer Training]]></title>
        <link href="https://developers.shopware.com/blog/2017/11/08/exclusive-enterprise-developer-training"/>
        <updated>2017-11-08T00:00:00+00:00</updated>
        <id>https://developers.shopware.com/blog/2017/11/08/exclusive-enterprise-developer-training</id>
        <content type="html"><![CDATA[<p><img src="/blog/img/2017-11-08-exclusive-enterprise-dev-training/banner.png" alt="banner" /></p>

<h1>Exclusive Enterprise Developer Training - Only five places remaining</h1>

<p>In this one-day workshop, you will get insight into the technology behind Shopware Enterprise, namely the Shopware Accelerator “B2B Suite”. Led by the developers who created the software itself, you will learn everything about this key feature, including practical application. This training is designed for experienced developers who already have the “Shopware Certified Developer” certificate.</p>

<h2>Info:</h2>

<h3>Date</h3>

<p>November 15, 2017</p>

<h3>Time</h3>

<p>Check-in: From 8:30 am
Start: 9 am
End: 5 pm</p>

<h3>Location:</h3>

<p>shopware AG
Ebbinghoff 10 
48624 Schöppingen
Germany</p>

<h3>Fee:</h3>

<p>795 Euro per person</p>

<h2>Registration</h2>

<p>Please send an email to sales@shopware.com</p>

<h2>What you can expect</h2>

<ul>
<li>Training held in English</li>
<li>Intro to the Enterprise architecture</li>
<li>Working with the B2B Suite</li>
<li>Intro to the order management</li>
<li>Intro to the user management</li>
<li>Extending the UI</li>
</ul>

<h2>Target group</h2>

<ul>
<li>Experienced PHP developers</li>
<li>max. 5 participants</li>
</ul>

<h2>Requirements</h2>

<ul>
<li>Basic knowledge of Doctrine</li>
<li>Basic knowledge of Smarty</li>
<li>Basic Knowledge of ExtJS</li>
</ul>

<h2>Services</h2>

<ul>
<li>One-day training</li>
<li>Fully equipped computer</li>
<li>catering
 </li>
</ul>
]]></content>
    </entry>
        <entry>
        <title type="html"><![CDATA[MeetNext - a recap]]></title>
        <link href="https://developers.shopware.com/blog/2017/10/23/meetnext-a-recap"/>
        <updated>2017-10-23T00:00:00+00:00</updated>
        <id>https://developers.shopware.com/blog/2017/10/23/meetnext-a-recap</id>
        <content type="html"><![CDATA[<h1>Introduction</h1>

<p><a href="/blog/img/2017-10-23-meetnext-recap/cody_army.jpg"><img src="/blog/img/2017-10-23-meetnext-recap/cody_army_thumb.jpg" alt="Army of Codys" /></a></p>

<h2>When</h2>

<p>#MeetNext took place from October 18th to 20th</p>

<h2>Where</h2>

<p><a href="/blog/img/2017-10-23-meetnext-recap/campus_view.jpg"><img src="/blog/img/2017-10-23-meetnext-recap/campus_view_thumb.jpg" alt="Germania Campus" /></a></p>

<p>Münster, Germany</p>

<h2>What</h2>

<p>The participants were informed about the current state of the Shopware research.</p>

<p>So, what is the <code>Next</code> in #MeetNext about? In a nutshell, it is the next big thing. A completely new product different to 5.x which will be developed simultaneously to Shopware 5. They will both receive patches and new features. Which leads us to the next question:</p>

<h2>Why</h2>

<p>Shopware is a well established, mature product. As the people who are working with Shopware know, there are a lot of things in the software that work in a certain way because it is our legacy. And we can't change it without effectively breaking the functionality of almost every plugin out there. Example: Ever wondered why products are called <code>articles</code> in shopware? Because the german word for a product is <code>Artikel</code>. Ever wondered why there are multiple terms for manufacturer? Legacy. So yeah, that's not what we want and of course there's much more, especially regarding the architecture.</p>

<p>So the main reason is: We want to continue to make Shopware better, faster, ready for the future and easier to develop for. To achieve this, we have to break a lot of stuff, and we don't want to throw away all the work we and you guys out there already invested. We're always telling you, like a mantra, that we love our community. Guess what, we do this because we mean it. You're part of Shopware and we wouldn't want to have a different community.</p>

<p>All that said, we want to create a second version of Shopware which only carries the good part of our legacy. We don't want to do this in the dark, doing the jack-in-the-box at some time and presenting the new and shiny brother of Shopware 5. We want to have you aboard as soon as possible. We want to hear from you if the things we are planning and implementing are what you need in the end. We want to hear what you think is a mistake, what we forgot and what is even more awesome than before.</p>

<p>The #MeetNext was the first feedback event and it was, marketing speak aside, a huge success. Before we dive in, always remember you can see for yourself what is happening, either on <a href="https://github.com/shopware/shopware/tree/labs">github</a> or in the <a href="https://developers.shopware.com/labs/">documentation</a>.</p>

<h1>A brief summary</h1>

<p><a href="/blog/img/2017-10-23-meetnext-recap/room_overview.jpg"><img src="/blog/img/2017-10-23-meetnext-recap/room_overview_thumb.jpg" alt="Room overview" /></a></p>

<p>There were five topics:</p>

<ul>
<li>
<a href="https://developers.shopware.com/labs/housekeeping/">housekeeping</a>
</li>
<li>
<a href="https://developers.shopware.com/labs/api/">API</a>
</li>
<li>
<a href="https://developers.shopware.com/labs/internationalization/">i18n</a>
</li>
<li>
<a href="https://developers.shopware.com/labs/new-administration/">administration (former backend)</a>
</li>
<li>
<a href="https://developers.shopware.com/labs/shopping-cart-and-ordering-processes/">basket &amp; order process</a>
</li>
</ul>

<p>The main topics that were discussed at #MeetNext were <em>API</em>, <em>Administration</em> and <em>Basket</em>.</p>

<p>If you follow the links above you can find the updated documentation.</p>

<h1>The results</h1>

<p>Now for the results. And by saying results we are talking about the feedback the participants gave us, sorted by topic.</p>

<p>These things are the &quot;top feedback&quot;, of course there were a lot more valuable ideas, and we heard them all and wrote them down.</p>

<h2>API</h2>

<table>
<thead>
<tr>
<th>Good things</th>
<th>Bad things, improvements &amp; new ideas</th>
</tr>
</thead>
<tbody>
<tr>
<td>UUIDs</td>
<td>REST API should not be used as ERP API</td>
</tr>
<tr>
<td>Foreign Keys</td>
<td>Plugin support</td>
</tr>
<tr>
<td>Error Handling</td>
<td>No attribute support</td>
</tr>
<tr>
<td>SwagQL</td>
<td>A lot of class changes needed for structural changes</td>
</tr>
<tr>
<td>Single Source Of Truth</td>
<td>Use HTTP status codes</td>
</tr>
<tr>
<td>Performance</td>
<td>ACL</td>
</tr>
<tr>
<td>Upsert/Sync</td>
<td>Audit-Log</td>
</tr>
</tbody>
</table>

<h2>Basket</h2>

<table>
<thead>
<tr>
<th>Good things</th>
<th>Bad things, improvements &amp; new ideas</th>
</tr>
</thead>
<tbody>
<tr>
<td>Stateless</td>
<td>Dynamic processor should be splitted</td>
</tr>
<tr>
<td>Price &amp; tax calculation</td>
<td>part-delivery system needs to be highly configurable</td>
</tr>
<tr>
<td>Concept for deliveries</td>
<td>Use money objects instead of floats</td>
</tr>
<tr>
<td>Highly modular</td>
<td>Priority of processors should be a dependency system</td>
</tr>
<tr>
<td>Concept of processors</td>
<td>Persist the calculations alongside an order</td>
</tr>
<tr>
<td>Expandability</td>
<td></td>
</tr>
<tr>
<td>Upsert/Sync</td>
<td></td>
</tr>
</tbody>
</table>

<h2>Administration</h2>

<blockquote>
<p><strong>Note:</strong> We're creating a new &quot;backend&quot; without extJS and we're calling it &quot;administration&quot;</p>
</blockquote>

<table>
<thead>
<tr>
<th>Good things</th>
<th>Bad things, improvements &amp; new ideas</th>
</tr>
</thead>
<tbody>
<tr>
<td>UX concept</td>
<td>Vue.js could be too complex</td>
</tr>
<tr>
<td>Routing</td>
<td>Client-side twig rendering</td>
</tr>
<tr>
<td>Less boilerpate code needed</td>
<td>View-layer abstraction</td>
</tr>
<tr>
<td>No more client-side models</td>
<td>No Typescript</td>
</tr>
<tr>
<td>Saving of changesets</td>
<td>Huge bootstrapping process</td>
</tr>
<tr>
<td>Hot-reloading</td>
<td>Better accessibility for people with disability</td>
</tr>
<tr>
<td>Upsert/Sync</td>
<td></td>
</tr>
</tbody>
</table>

<h1>Hacking</h1>

<p>After the sessions ended, a lot of the participants started hacking and tried to break things.</p>

<p>Since we didn't manage to memorize (or write down) the names of all hackers and their projects, here is a list of examples in no particular order and without credit. But the list shows two things, first how awesome Shopware next will be (short time, great projects) and how awesome the Shopware community is. Especially you guys who managed to attend #MeetNext. ;-)</p>

<h2>Some of the &quot;hack projects&quot;</h2>

<ul>
<li>Implement reactive window management in vue.js</li>
<li>Tracing library for class performance analysis</li>
<li>Port an existing cart-related plugin to Next</li>
<li>Revive the old ExtJS backend and let it speak to the new API</li>
<li>Create a different concept of component extension for vue.js</li>
</ul>

<h1>Visual Impressions</h1>

<p><a href="/blog/img/2017-10-23-meetnext-recap/impressions_00.jpg"><img src="/blog/img/2017-10-23-meetnext-recap/impressions_00_thumb.jpg" alt="Visual impressions" /></a></p>

<p><a href="/blog/img/2017-10-23-meetnext-recap/impressions_01.jpg"><img src="/blog/img/2017-10-23-meetnext-recap/impressions_01_thumb.jpg" alt="Visual impressions" /></a></p>

<p><a href="/blog/img/2017-10-23-meetnext-recap/impressions_02.jpg"><img src="/blog/img/2017-10-23-meetnext-recap/impressions_02_thumb.jpg" alt="Visual impressions" /></a></p>

<p><a href="/blog/img/2017-10-23-meetnext-recap/impressions_03.jpg"><img src="/blog/img/2017-10-23-meetnext-recap/impressions_03_thumb.jpg" alt="Visual impressions" /></a></p>

<p><a href="/blog/img/2017-10-23-meetnext-recap/impressions_04.jpg"><img src="/blog/img/2017-10-23-meetnext-recap/impressions_04_thumb.jpg" alt="Visual impressions" /></a></p>

<p><a href="/blog/img/2017-10-23-meetnext-recap/impressions_05.jpg"><img src="/blog/img/2017-10-23-meetnext-recap/impressions_05_thumb.jpg" alt="Visual impressions" /></a></p>

<p><a href="/blog/img/2017-10-23-meetnext-recap/impressions_06.jpg"><img src="/blog/img/2017-10-23-meetnext-recap/impressions_06_thumb.jpg" alt="Visual impressions" /></a></p>

<p><a href="/blog/img/2017-10-23-meetnext-recap/impressions_07.jpg"><img src="/blog/img/2017-10-23-meetnext-recap/impressions_07_thumb.jpg" alt="Visual impressions" /></a></p>
]]></content>
    </entry>
        <entry>
        <title type="html"><![CDATA[Shopware goes gitter]]></title>
        <link href="https://developers.shopware.com/blog/2017/09/29/shopware-goes-gitter"/>
        <updated>2017-09-29T00:00:00+00:00</updated>
        <id>https://developers.shopware.com/blog/2017/09/29/shopware-goes-gitter</id>
        <content type="html"><![CDATA[<h2>A huge change for the community</h2>

<p>For several years now, since 2011 to be precise, there is a small but vibrant chat community on freenode in the #shopware channel.</p>

<p>All these people chatting there have one thing in common, they are working on the Shopware ecommerce system, in one way or the other.</p>

<p>Now these times will be over. As of the end of October 2017, the IRC channel will be closed.
If you hear a faint scream in the distance it may be one of the guys from the IRC channel who is just reading this post as you do now.</p>

<p><strong><strong>But!</strong></strong> of course we will not leave you alone in the dark. And we are not closing the IRC channel because we don't like people chatting.
In fact, we love your passion for shopware and we want to communicate with you and we want you to have a platform where you can communicate directly to other people involved with Shopware.</p>

<p>So, why the change? What changes? What are the consequences? Just read further, friend, and find out.</p>

<h2>What will change?</h2>

<p>For a short period of time (read: one month) the IRC channel will stay open. During this period we will actively transfer people to <a href="https://gitter.im/shopware/shopware">Gitter</a>.</p>

<p>After this, the IRC channel will be closed and all chat activity will take place on Gitter.</p>

<p>If you are an IRC user by now, you can use your client for Gitter as well, just follow the steps mentioned at the end of the <a href="https://developers.shopware.com/contributing/gitter">contribution page</a>.
Of course we encourage you to use the clients provided by Gitter, since most IRC clients don't handle markdown that well.</p>

<p>Since there are a lot of german users, those will find a german channel to make their lifes easier.</p>

<p>If you are new to the show, just <a href="https://gitter.im/shopware/shopware?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge"><img src="https://badges.gitter.im/shopware/shopware.svg" alt="Gitter" /></a>!</p>

<h2>What is Gitter?</h2>

<p>In case you are new to this, Gitter is a free, <a href="https://gitlab.com/gitlab-org/gitter/webapp">open source</a> chat where you login with your github or twitter account and are able to chat immediatly.
Like IRC, but with more features and more or less integrated with our github repository. Like Slack, but more community-centric.</p>

<p>If you want to know the full story, there is a nice <a href="https://en.wikipedia.org/wiki/Gitter">wikipedia article</a> about the service.</p>

<p><em>One of the biggest changes for former IRC users:</em> Gitter chatrooms are public and save history indefinitely. So everything you say is wisdom for eternity.
Or embarrassment, but this is an unusual state of mind for shopware enthusiasts. So be careful. There be dragons. On the other hand, you don't need that icky <a href="https://en.wikipedia.org/wiki/BNC_(software)">bouncer</a> anymore. ;)</p>

<h2>But... why?</h2>

<p>To cite the devdocs <a href="https://developers.shopware.com/contributing/irc">irc page</a>:</p>

<blockquote>
<p>Since 2011, the shopware IRC channel was active and well established.<br />
Today, IRC is a little bit nerdy and we really love it. Most of the cool kids are playing on freenode.</p>
<p>But besides the coolness there are a few disadvantages that come with using IRC:</p>
<ul>
<li>No history without 3rd party software</li>
<li>No mapping between the contributor and the IRC nick (Who is xenomorph again?)</li>
<li>No easy access except through anonymous web IRC clients</li>
<li>Lacks modern features like image sharing, formatting and such</li>
</ul>
<p>Of course, all these points are arguable.<br />
But in the end, we wanted to have a chat community with easier access and more modern features.</p>
<p>We hope to not lose any old IRC users (we learned to love you all at #shopware) and get many new and interesting people to join <a href="https://developers.shopware.com/contributing/gitter">Gitter</a>.</p>
</blockquote>

<h2>The transition</h2>

<p>First step is, the IRC channels will get +m and +s and all users will get a message similar to:</p>

<blockquote>
<p>Come join us and <a href="https://gitter.im/shopware/shopware?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge"><img src="https://badges.gitter.im/shopware/shopware.svg" alt="Gitter" /></a></p>
</blockquote>

<p>From then on, every user who joins the IRC channel will automatically be notified of the new situation.</p>

<p>After one month, the channel will become invite only.</p>
]]></content>
    </entry>
        <entry>
        <title type="html"><![CDATA[Ajax Panel]]></title>
        <link href="https://developers.shopware.com/blog/2017/09/25/ajax-panel"/>
        <updated>2017-09-25T00:00:00+00:00</updated>
        <id>https://developers.shopware.com/blog/2017/09/25/ajax-panel</id>
        <content type="html"><![CDATA[<p>In this blog post I want to present the concept of our ajax based panel system which we use in our B2B-Suite.
In the B2B-Suite we had to develop a backend user interface inside the Shopware frontend.</p>

<p>On a single page in a typical backend view you may find:</p>

<ul>
<li>list of entities</li>
<li>form to enter new data</li>
<li>list of related entities</li>
<li>some statistics</li>
</ul>

<p>Serving all this data from a single controller action may already be hard, now imagine the sheer number of parameters you may
have to exchange with this single action when you want to enable pagination, validation and searching on this single page,
through this single action.</p>

<p>This is pretty much the reason why stateless services and statefull frontends are an important topic in todays web development.
And it is exactly the reason why we created the ajax panel. It provides us with the means to load local states from the
server and create a rich ui.</p>

<p>We evaluated different frameworks to achieve this target. AngularJS and Vue.JS were possible frameworks which allows
two way data binding and statefull frontend access.</p>

<p><img src="/blog/img/ajax-panel-abstract.svg" alt="image"></p>

<p>The small controller actions don't respond with the full page dom tree anymore. Each controller is only responsible for a
specific panel content.</p>

<p>One ouf our targets was also to use most of the already existing dependencies instead of adding new frameworks just for
the B2B-Suite. We use jQuery because it is a base dependency of Shopware 5.</p>

<p>We decided to develop our own lightweight frontend framework on top of jQuery which allows asynchronous HTTP requests for our frontend.
The main target of this framework is to execute asynchronous calls and render the response in a given and zoned DOM element by using an event.
The behaviour is very similar to angular's <a href="https://github.com/angular/zone.js">zone.js</a>.</p>

<h2>Code Example</h2>

<p>The base structure of our ajax panel index action looks like this:</p>

<pre><code class="language-html">&lt;div class=&quot;ajax-panel&quot; data-url=&quot;http://domain.tld/ajax-panel-controller&quot; data-id=&quot;example&quot;&gt;&lt;/div&gt;
</code></pre>

<p>On page load our jQuery ajax panel plugin will search for the class <code>ajax-panel</code> and use the data attribute <code>data-url</code>.
If this attribute contains a valid url the jQuery plugin will perform an asynchronous http request on the attribute url.
If the response is signed with a HTTP Status Code of 200 the response will be rendered back in the original zoned div with the data-id <code>example</code>.</p>

<h2>Response Example</h2>

<p>The ajax panel controller action responds with the content of the ajax panel element and moves the dom structure inside the given element.
The response could be like:</p>

<pre><code class="language-html">&lt;span&gt;Example Ajax Content&lt;/span&gt;
</code></pre>

<p>After the response is rendered in the parent Ajax Panel <code>div</code> the full dom structure will look like this:</p>

<pre><code class="language-html">&lt;div class=&quot;ajax-panel&quot; data-url=&quot;http://domain.tld/ajax-panel-controller&quot; data-id=&quot;example&quot;&gt;

    &lt;span&gt;Example Ajax Content&lt;/span&gt;

&lt;/div&gt;
</code></pre>

<h2>Ajax Panel Plugins</h2>

<p>After we build our first views we run in several problems. The biggest problem was, that we want to use jQuery in the
response's rendered content. We decided to develop an own plugin loader for our ajax panel which loads automatically
JavaScript plugins after the panel load. We throw many events for third party plugins that developers can use for their
own plugin. Also the shopware default plugins can be registered in the ajax panel.</p>

<p>To achieve this approach we added an optional <code>data-plugins</code> attribute which can contain multiple JavaScript plugins:</p>

<pre><code class="language-html">&lt;div class=&quot;ajax-panel&quot; data-url=&quot;[..]&quot; data-id=&quot;[..]&quot; data-plugins=&quot;examplePlugin&quot;&gt;&lt;/div&gt;
</code></pre>

<h2>Basic Ajax Panel Plugin</h2>

<p>Our JavaScript example plugin code looks like that:</p>

<pre><code class="language-javascript">/**
 * Remove all elements with triggerSelector Class
 */
$.plugin('b2bAjaxPanelExamplePlugin', {
    defaults: {
        triggerSelector: '.should--removed'
    },

    init: function () {
        var me = this;
        me._on(document, 'b2b--ajax-panel_loaded', $.proxy(me.addClasses, me));
    },

    addClasses: function (event, eventData) {
        var $panel = $(eventData.panel);

        $panel
            .find(me.defaults.triggerSelector)
            .remove();
    },

    destroy: function() {
        var me = this;
        me._destroy();
    }
});
</code></pre>

<h2>Dependencies</h2>

<p>With the ajax panel we build a lightweight frontend framework which only depends on jQuery. Shopware delivers jQuery in the
Responsive theme, so we don't need to require any addional component. Awesome, isn't it?</p>

<h2>Conclusion</h2>

<p>Our Ajax Panel is a complete flexible and lightweight framework with many possibilities and jQuery as a single dependency.
The panel can be handled with simple data attributes and additional plugins allows to use JavaScript plugins.
We use this technology in our B2B-Suite in each module very succesfully.</p>
]]></content>
    </entry>
        <entry>
        <title type="html"><![CDATA[Mutation Testing]]></title>
        <link href="https://developers.shopware.com/blog/2017/08/24/mutation-testing"/>
        <updated>2017-08-24T00:00:00+00:00</updated>
        <id>https://developers.shopware.com/blog/2017/08/24/mutation-testing</id>
        <content type="html"><![CDATA[<div class="alert alert-info">
Anyone who is just searching for the example source code and does not want to read the complete blog post, <a href="https://github.com/teiling88/mutation-testing">here it is.</a>
</div>

<p>In this blog post I want to present the concept of mutation testing and a simple example with <a href="https://github.com/humbug/humbug">humbug</a> for you. A few months ago, we have reached the 100 % code coverage goal in our actual project, the <a href="https://docs.enterprise.shopware.com/b2b-suite/">b2b-suite</a>. But what does this number stand for? Yes it <strong><em>only</em></strong> says you created enough unit-tests to execute every single line of code in your application. Nothing more. In the following sections I will create a simple class which is completely covered with unit tests. After that we will improve the tests and show how mutation testing can support us there.</p>

<h2>Create an example class and unit tests</h2>

<p>Let us have a look on this simple comparison example class:</p>

<pre><code class="language-php">&lt;?php declare(strict_types=1);

class Comparison
{
    public function isGreaterThan(int $x, int $y): bool
    {
        return $x &gt; $y;
    }

    public function isSmallerThan(int $x, int $y): bool
    {
        return $x &lt; $y;
    }
}
</code></pre>

<p>To create a unit-test to reach 100 % coverage is very simple. See the example below:</p>

<pre><code class="language-php">&lt;?php declare(strict_types=1);

class ComparisonTest extends PHPUnit\Framework\TestCase
{
    private $comparison;

    public function setUp()
    {
        $this-&gt;comparison = new Comparison();
    }

    public function test_isGreaterThan()
    {
        self::assertTrue($this-&gt;comparison-&gt;isGreaterThan(5, 3));
    }

    public function test_isSmallerThan()
    {
        self::assertTrue($this-&gt;comparison-&gt;isSmallerThan(3, 5));
    }
}
</code></pre>

<p>The execution of these unit tests creates the following output:</p>

<pre><code>OK (2 tests, 2 assertions)


Code Coverage Report:   
  2017-08-22 12:42:16   
                        
 Summary:               
  Classes: 100.00% (1/1)
  Methods: 100.00% (2/2)
  Lines:   100.00% (2/2)

Comparison
  Methods: 100.00% (2/2)   Lines: 100.00% (2/2)

</code></pre>

<p>So we created a class with two methods which are covered by tests. We could think this class is bullet proof and every invalid change will be discovered from our test. But really? What if some developer adds a small equal sign to our methods? Our new <code>Comparison</code> class looks like this:</p>

<pre><code class="language-php">&lt;?php declare(strict_types=1);

class Comparison
{
    public function isGreaterThan(int $x, int $y): bool
    {
        return $x &gt;= $y;
    }

    public function isSmallerThan(int $x, int $y): bool
    {
        return $x &lt;= $y;
    }
}
</code></pre>

<p>And the result of our unit test is the same like above. Every test passed. But now false positive results are possible . If we use the method <code>isGreaterThan</code> with the parameters <code>$x = 5; $y = 5;</code> we will get true as return value instead of the supposed false value.</p>

<p>So what happened? At the moment we only test the happy execution path of these methods and don't observe of the threshold values. For every developer it is obviously that 5 is greater than 3 and 3 is smaller than 5. So we create this kind of test. But how we have to improve our test to cover oll existing threshold values?</p>

<p>First, we should test the nearest combination of parameters which causes an false return value. In our example methods we can easily use the equal number for <code>$x</code> and <code>$y</code>. After that we should test the farthest combination which causes a true return value. For this we can easily use the PHP constants <code>PHP_INT_MAX</code> and <code>PHP_INT_MIN</code>. The new created test can be seen below:</p>

<pre><code class="language-php">&lt;?php declare(strict_types=1);

class ComparisonTest extends PHPUnit\Framework\TestCase
{
    // ...

    public function test_isGreaterThan()
    {
        self::assertTrue($this-&gt;comparison-&gt;isGreaterThan(5, 3));
        self::assertFalse($this-&gt;comparison-&gt;isGreaterThan(4, 4));
        self::assertTrue($this-&gt;comparison-&gt;isGreaterThan(PHP_INT_MAX, PHP_INT_MIN));
    }

    public function test_isSmallerThan()
    {
        self::assertTrue($this-&gt;comparison-&gt;isSmallerThan(3, 5));
        self::assertFalse($this-&gt;comparison-&gt;isSmallerThan(4, 4));
        self::assertTrue($this-&gt;comparison-&gt;isSmallerThan(PHP_INT_MIN, PHP_INT_MAX));
    }
}
</code></pre>

<h2>Mutation Testing</h2>

<p>In this small example it is very easy to find the needed test range and threshold values. But how does it work in bigger applications with hundred of classes and thousand lines of code? I guess in the most cases only the happy path will be tested. So how can mutation testing help us to create better tests?</p>

<p>The basic concept of mutation testing sounds very easy. You change comparison statements as an example from <code>===</code> to <code>!==</code> or changes return values of methods like <code>return true;</code> to <code>return false;</code>. This new versions of your application are called &quot;mutants&quot;. After your change you execute the test suite. If the suite fails your tests &quot;killed the mutant&quot;. This means your tests detected the wrong behaviour.</p>

<p>Mutation testing introduces a new quality score the so-called &quot;Mutation Score Indicator&quot;. This score is the ratio of the number of Dead Mutants over all created Mutants. Usually this score is calculated like the code coverage in percent.</p>

<p>In order to make this kind of testing automatically we can use <a href="https://github.com/humbug/humbug">humbug</a> for that. Humbug has a wide range of mutators like the described mutations above. A good overview can be found <a href="https://github.com/humbug/humbug#mutators">here</a>.</p>

<p>So let us revert the new assertions and execute humbug for the first time. Humbug executes phpunit in the first place. After that it will create the mutants and execute the test suite again for every created mutant. To improve the execution time humbug only uses those test classes which cover the specific file and line on which the mutation was inserted.</p>

<p>Humbug creates the following output:</p>

<pre><code>Humbug has completed the initial test run successfully.
Tests: 2 Line Coverage: 100.00%

Humbug is analysing source files...

Mutation Testing is commencing on 1 files...
(.: killed, M: escaped, S: uncovered, E: fatal error, T: timed out)

M.M.

4 mutations were generated:
       2 mutants were killed
       0 mutants were not covered by tests
       2 covered mutants were not detected
       0 fatal errors were encountered
       0 time outs were encountered

Metrics:
    Mutation Score Indicator (MSI): 50%
    Mutation Code Coverage: 100%
    Covered Code MSI: 50%
</code></pre>

<p>As we can see, humbug created 4 mutations, 2 mutants were killed and 2 mutants were not detected. So let us have a look at the generated mutations which are not detected:</p>

<pre><code class="language-php">    public function isGreaterThan(int $x, int $y): bool
    {
        return $x &gt;= $y;
    }
    
    public function isSmallerThan(int $x, int $y): bool
    {
        return $x &lt;= $y;
    }    
</code></pre>

<p>Humbug automatically detects the same issues which we found above manually. If we add the new assertions which we already created above we should reach an Mutation Score Indicator of 100%. The created output stands below:</p>

<pre><code>Humbug has completed the initial test run successfully.
Tests: 2 Line Coverage: 100.00%

Humbug is analysing source files...

Mutation Testing is commencing on 1 files...
(.: killed, M: escaped, S: uncovered, E: fatal error, T: timed out)

....

4 mutations were generated:
       4 mutants were killed
       0 mutants were not covered by tests
       0 covered mutants were not detected
       0 fatal errors were encountered
       0 time outs were encountered

Metrics:
    Mutation Score Indicator (MSI): 100%
    Mutation Code Coverage: 100%
    Covered Code MSI: 100%
</code></pre>

<h2>Conclusion</h2>

<p>Mutation Testing especially humbug is a powerful tool to rate the quality of your unit tests. It checks the hole test suite and gives you the safety that your created tests are useful. Our b2b-suite has at the moment a Mutation Score Indicator of 79%. So I think there is some space left for improvements ;-).</p>

<p>If you are interested in the source code, it can be found <a href="https://github.com/teiling88/mutation-testing">here</a>.</p>
]]></content>
    </entry>
        <entry>
        <title type="html"><![CDATA[Quick Tip: Custom fonts in the TinyMCE editor]]></title>
        <link href="https://developers.shopware.com/blog/2017/08/09/quick-tip-custom-fonts-in-the-tinymce-editor"/>
        <updated>2017-08-09T00:00:00+00:00</updated>
        <id>https://developers.shopware.com/blog/2017/08/09/quick-tip-custom-fonts-in-the-tinymce-editor</id>
        <content type="html"><![CDATA[<p><img src="/blog/img/custom-font-example.png" alt="Screenshot Storefront" /></p>

<p><em>Custom font example in the Shopware storefront</em></p>

<p>Lately we're getting more &amp; more requests on how to register / add custom fonts to the TinyMCE WYSIWYG editor in the Shopware administration. The editor is used throughout every Shopware module where you can insert HTML text, therefore it would be handy to have your own fonts in there.</p>

<p>We've created an open source Shopware plugin called <code>SwagTinyMceCustomFont</code> which covers your needs. It allows you to integrate custom fonts from <a href="https://fonts.google.com/">Google Fonts</a>. The plugin automatically loads the font in the administration interface as well as in the storefront of your shop.</p>

<p>You can find the plugin as well as the feature overview, installation guide and usage example on GitHub on: <a href="https://github.com/shopwareLabs/SwagTinyMceCustomFont">https://github.com/shopwareLabs/SwagTinyMceCustomFont</a>.</p>
]]></content>
    </entry>
        <entry>
        <title type="html"><![CDATA[SEO URLs in plugins]]></title>
        <link href="https://developers.shopware.com/blog/2017/07/24/seo-urls-in-plugins"/>
        <updated>2017-07-24T00:00:00+00:00</updated>
        <id>https://developers.shopware.com/blog/2017/07/24/seo-urls-in-plugins</id>
        <content type="html"><![CDATA[<p>In the world of eCommerce, SEO is a very important and recurrent topic.
Thus, Shopware offers some tools to create a SEO friendly shop by default, including SEO friendly URLs.
Make sure to have a look at the following SEO blog post, covering detailed information for the Shopware SEO engine: <a href="/blog/2015/08/11/the-shopware-seo-engine/">The Shopware SEO engine</a></p>

<p>But for now, how do we actually create proper SEO URLs for our custom plugins?</p>

<p>It must have been about a year ago when I stumbled across the same issue while reworking our premium plugin
<a href="http://store.shopware.com/en/swagproductadvisor/shopping-advisor.html">Shopping advisor</a>.</p>

<p>In this blog post, I want to provide a short tutorial on how to implement custom SEO URLs for your plugins.
I'll also attach an example plugin for both Shopware 5.3 and 5.2 at the end of the tutorial.</p>

<h2>Generating a SEO URL for a custom controller</h2>

<p>For this short tutorial I will use a very basic plugin based on the new plugin system.</p>

<h3>The scenario</h3>

<p>As an example, I would like to create a glossary plugin.</p>

<p>Using the glossary plugin, the shop owner should be able to create a description for a word.
The plugin will provide an overview, showing all given words and their description.</p>

<p>To store those, I created a table with the name <code>s_glossary</code> and the columns <code>id</code>, <code>word</code> and <code>description</code>.</p>

<p>Later in this tutorial we also want to add a detail page, only showing a given word and its respective description.</p>

<p>Let's assume the basic plugin structure contains a registered Frontend controller called <code>Glossary</code>, as well as the mentioned
database table.</p>

<h3>Let's get started</h3>

<p>For the glossary overview, we would implement an <code>indexAction</code> in our <code>Glossary</code> controller to handle the overview.
In order to call our action now, we'd open the following URL: <code>http://myShop.com/glossary/</code></p>

<p>That URL looks smooth and SEO friendly already, doesn't it?</p>

<p>What happens, if we want the glossary page to be internationally available?
For your german customers, you would want the glossary to be available using <code>http://myShop.com/glossar/</code> as well.</p>

<p>This can and should be done using SEO URLs.</p>

<p>First of all, SEO URLs in Shopware are stored in the database table <code>s_core_rewrite_urls</code>.
We could just create a new entry in that table during the installation process of the plugin.
That would actually work for now.</p>

<p>Yet, we want to create those SEO URLs depending on the 'refresh strategies' configuration.</p>

<p>This configuration can be found in the backend: <code>Configuration &gt; Cache/performance &gt; Settings &gt; SEO &gt; Refresh strategy</code>.
Our SEO URLs are generated in three different ways, being configurable in the backend.</p>

<p>Available options are:</p>

<ul>
<li>Manually</li>
<li>Via cronjob</li>
<li>Live</li>
</ul>

<p>Again, refer to this blog post to get more detailed information on how those work: <a href="/blog/2015/08/11/the-shopware-seo-engine/">The Shopware SEO engine</a></p>

<p>As each of the options mentioned above requires slightly different plugin logic, I'll explain them step by step.</p>

<h3>Implement logic for 'Via cronjob'</h3>

<div class="alert alert-danger" role="error">
    The following code is only compatible with Shopware version 5.3 or higher.
</div>

<p>In <strong>Shopware 5.3</strong> we implemented a new event to SEO URL generation using the cronjob. <br />
Everytime the cronjob <code>RefreshSeoIndex</code> is triggered, the method <code>onRefreshSeoIndex</code> in <a href="https://github.com/shopware/shopware/blob/5.3/engine/Shopware/Plugins/Default/Core/RebuildIndex/Bootstrap.php#L134">engine/Shopware/Plugins/Default/Core/RebuildIndex/Bootstrap.php</a> is called. <br />
It now contains a new notify event called <code>Shopware_CronJob_RefreshSeoIndex_CreateRewriteTable</code>, which we will use to add our own SEO URL generation process.
The event is called once for each shop after every other SEO URL (e.g. Products, Categories, ...) has been generated for this shop.</p>

<pre><code>public static function getSubscribedEvents()
{
    return [
        'Shopware_CronJob_RefreshSeoIndex_CreateRewriteTable' =&gt; 'createGlossaryRewriteTable'
    ];
}

public function createGlossaryRewriteTable()
{
    /** @var \sRewriteTable $rewriteTableModule */
    $rewriteTableModule = Shopware()-&gt;Container()-&gt;get('modules')-&gt;sRewriteTable();
    
    // Insert new rewrite URL for our custom controller
    $rewriteTableModule-&gt;sInsertUrl('sViewport=glossary', 'glossary/');
}
</code></pre>

<p>In the example mentioned above, we would create a new rewrite URL for each shop.
Of course, in this code we could and should now build our logic to create the translated rewrite URLs, e.g. <code>http://myShop.com/glossar</code>, which would be the german translation for it.</p>

<h3>Implement logic for 'Live'</h3>

<p>This option does <strong>not</strong> mean, that with each and every request the SEO URLs are re-generated.
You can configure the refresh interval in the backend under <code>Configuration &gt; Cache/performance &gt; Settings &gt; SEO &gt; Refresh strategy</code>.</p>

<p>Basically, whenever a request is sent to the shop and the response is about to be sent back, Shopware checks if it's time to re-generate the SEO URLs.
In only that case (refresh strategy is 'live' AND the interval has passed), the method <code>sCreateRewriteTable</code> from our core module <a href="https://github.com/shopware/shopware/blob/5.3/engine/Shopware/Core/sRewriteTable.php#L220">sRewriteTable</a> is called.</p>

<p>This method only generates the SEO URLs for the <strong>currently</strong> active shop.</p>

<p>Therefore we could use an after hook on the method mentioned above.
The code to actually insert our URL into the database is the same, so we can just re-use the same code with a different event.</p>

<pre><code>public static function getSubscribedEvents()
{
    return [
        'Shopware_CronJob_RefreshSeoIndex_CreateRewriteTable' =&gt; 'createGlossaryRewriteTable',
        'sRewriteTable::sCreateRewriteTable::after' =&gt; 'createGlossaryRewriteTable',
    ];
}

public function createGlossaryRewriteTable()
{
    /** @var \sRewriteTable $rewriteTableModule */
    $rewriteTableModule = Shopware()-&gt;Container()-&gt;get('modules')-&gt;sRewriteTable();
    $rewriteTableModule-&gt;sInsertUrl('sViewport=glossary', 'glossary/');
}
</code></pre>

<p>That's it for the live mode.</p>

<h3>Implement logic for 'Manual'</h3>

<div class="alert alert-danger" role="error">
    The following code is only compatible with Shopware version 5.3 or higher.
</div>

<div class="is-float-right">
    <img alt="Overview of the SEO URL concept" src="/blog/img/manual-seo-generation-win.png">
    <div><em>The manual SEO URL generation window</em></div>
</div>

<p>This is where things become a little tricky.
The manual URL generation is actually handled in ExtJs, generating the URLs in a batch mode.</p>

<p>You can choose a batch size, which defines how many URLs should be generated with each request.</p>

<p>We want to have our own progress bar at the bottom of the window now to generate our SEO URLs for the currently selected shop in batch mode.</p>

<p>First of all we have to extend the file <a href="https://github.com/shopware/shopware/blob/5.3/themes/Backend/ExtJs/backend/performance/view/main/multi_request_tasks.js#L83">themes/Backend/ExtJs/backend/performance/view/main/multi_request_tasks.js</a>.
We have to extend the property 'seo', which contains all progress bars, their snippets and, most important, the request URL to be called for each batch call to generate the SEO URLs.</p>

<p>So, let's overwrite the ExtJs window.
I won't go into detail on how to extend an ExtJs file. Refer to this guide about <a href="/developers-guide/backend-extension/#example-#1:-simple-extension">extending the backend</a> instead.</p>

<p><em>Register new event:</em></p>

<pre><code>public static function getSubscribedEvents()
{
    return [
        ...
        'Enlight_Controller_Action_PostDispatch_Backend_Performance' =&gt; 'loadPerformanceExtension'
    ];
}
</code></pre>

<p><br /></p>

<p><em>The respective listener:</em></p>

<pre><code>public function loadPerformanceExtension(\Enlight_Controller_ActionEventArgs $args)
{
    $subject = $args-&gt;getSubject();
    $request = $subject-&gt;Request();

    if ($request-&gt;getActionName() !== 'load') {
        return;
    }

    $subject-&gt;View()-&gt;addTemplateDir(__DIR__ . '/Resources/views/');
    $subject-&gt;View()-&gt;extendsTemplate('backend/performance/view/glossary.js');
}
</code></pre>

<p>With Shopware 5.3 we implemented a new method called <code>addProgressBar</code> to <code>multi_request_tasks.js</code>.
As the first parameter you have to provide an object containing an 'initialText' to be shown initially, a 'progressText' to be shown while generating the SEO URLs
and a 'requestUrl' to be called with each step in the batch processing.
The second parameter has to be a name for the new progress bar - we need this one later.
The third parameter should be the target. Possible values are 'seo' and 'httpCache'. As we want to create a new progress bar to the SEO window, we'll use 'seo' here obviously.</p>

<pre><code>//{block name=&quot;backend/performance/view/main/multi_request_tasks&quot; append}
Ext.define('Shopware.apps.Performance.view.main.Glossary', {
    override: 'Shopware.apps.Performance.view.main.MultiRequestTasks',

    initComponent: function() {
        this.addProgressBar(
            {
                initialText: 'Glossary URLs',
                progressText: '[0] of [1] glossary URLs',
                requestUrl: '{url controller=glossary action=generateSeoUrl}'
            },
            'glossary',
            'seo'
        );

        this.callParent(arguments);
    }
});
//{/block}
</code></pre>

<p>Once we refresh the backend and probably clear the cache, the SEO window should now contain our new progress bar.
Now we need to create our backend controller and a <code>generateSeoUrlAction</code>.</p>

<p>With each AJAX request for the batch processing, we'll get a shopId, an offset and a limit to properly generate our SEO URLs.
We can ignore offset and the limit <strong>for the moment</strong>, since there is only a single URL to be generated for each shop.
Just remember them for later in this tutorial.</p>

<p><em>Controllers/Backend/Glossary.php</em></p>

<pre><code>&lt;?php

class Shopware_Controllers_Backend_Glossary extends Shopware_Controllers_Backend_ExtJs
{
    public function generateSeoUrlAction()
    {
        $shopId = $this-&gt;Request()-&gt;getParam('shopId');

        /** @var Shopware_Components_SeoIndex $seoIndex */
        $seoIndex = $this-&gt;container-&gt;get('SeoIndex');
        $seoIndex-&gt;registerShop($shopId);

        /** @var sRewriteTable $rewriteTableModule */
        $rewriteTableModule = $this-&gt;container-&gt;get('modules')-&gt;RewriteTable();
        $rewriteTableModule-&gt;baseSetup();
        $rewriteTableModule-&gt;sInsertUrl('sViewport=glossary', 'glossary/');

        $this-&gt;View()-&gt;assign(['success' =&gt; true]);
    }
}
</code></pre>

<p>We're fetching the shopId, register a shop using the given shopId and then simply insert our rewrite URL again.</p>

<p>Now there's one more thing missing.
Once we select a shop in the backend SEO module, an AJAX call is sent to collect the total counts of URLs to be created with each progress bar.
Our glossary URLs are not collected yet, so the module can't handle our glossary URLs properly yet.</p>

<p>To collect the URLs, the <code>getCountAction</code> of the <a href="https://github.com/shopware/shopware/blob/5.3/engine/Shopware/Plugins/Default/Core/RebuildIndex/Controllers/Seo.php#L72">SEO controller</a> is called.
Thankfully it provides a filter event <code>Shopware_Controllers_Seo_filterCounts</code> to properly add our own counts. For this we need to use the name we used earlier for the progress bar.</p>

<pre><code>public static function getSubscribedEvents()
{
    return [
        ...
        'Shopware_Controllers_Seo_filterCounts' =&gt; 'addGlossaryCount'
    ];
}

public function addGlossaryCount(\Enlight_Event_EventArgs $args)
{
    $counts = $args-&gt;getReturn();

    $counts['glossary'] = 1;

    return $counts;
}
</code></pre>

<p>Currently, there's only a single URL to be generated for each shop, so we'll just return a static 1.</p>

<p>So, now let's try it.
If you've implemented everything properly, it should work perfectly now.</p>

<h2>Custom parameters in SEO URL</h2>

<p>Now we've implemented a simple SEO URL generation for our glossary plugin.
The overview is now supported by SEO friendly URLs and we even generate those URLs in a proper way, depending on the given configuration.</p>

<p>Now we want to have some kind of &quot;detail&quot; page for each word.
When calling this detailed page, we only see a single word with its related description.</p>

<p>For this we need a new action in our <strong>Frontend</strong> Controller, e.g. &quot;detailAction&quot;.
We could call this action by using an URL like <code>http://myShop.com/glossary/detail</code>.
In this case though, we would have to attach an ID for the word we want to show now.</p>

<p>Sounds easy, let's just attach it to the URL:
<code>http://myShop.com/glossary/detail?wordId=1</code></p>

<p>This link would now display the word with the ID 1.
Wouldn't it be cooler to have the word itself as a part of the URL now?
E.g. you'd want to explain the word 'recursion', then the URL could look like this: <code>http://myShop.com/glossary/recursion</code></p>

<p>Way better, isn't it?</p>

<p>Now this already requires several changes in our code.
First of all, every time we generate our SEO URLs, we have to iterate through all words in our database.</p>

<pre><code>public function createGlossaryRewriteTable()
{
    /** @var \sRewriteTable $rewriteTableModule */
    $rewriteTableModule = Shopware()-&gt;Container()-&gt;get('modules')-&gt;sRewriteTable();
    $rewriteTableModule-&gt;sInsertUrl('sViewport=glossary', 'glossary/');

    /** @var QueryBuilder $dbalQueryBuilder */
    $dbalQueryBuilder = $this-&gt;container-&gt;get('dbal_connection')-&gt;createQueryBuilder();

    $words = $dbalQueryBuilder-&gt;select('glossary.id, glossary.word')
        -&gt;from('s_glossary', 'glossary')
        -&gt;execute()
        -&gt;fetchAll(\PDO::FETCH_KEY_PAIR);

    foreach ($words as $wordId =&gt; $word) {
        $rewriteTableModule-&gt;sInsertUrl('sViewport=glossary&amp;sAction=detail&amp;wordId=' . $wordId, 'glossary/' . $word);
    }
}
</code></pre>

<p>Also, we need to adjust the URL counts for the backend now.</p>

<pre><code>public function addGlossaryCount(\Enlight_Event_EventArgs $args)
{
    $counts = $args-&gt;getReturn();

    /** @var QueryBuilder $dbalQueryBuilder */
    $dbalQueryBuilder = $this-&gt;container-&gt;get('dbal_connection')-&gt;createQueryBuilder();
    $wordsCount = $dbalQueryBuilder-&gt;select('COUNT(glossary.id)')
        -&gt;from('s_glossary', 'glossary')
        -&gt;execute()
        -&gt;fetchAll(\PDO::FETCH_COLUMN);

    $counts['glossary'] = $wordsCount;

    return $counts;
}
</code></pre>

<p>Do you still remember the <code>offset</code> and the <code>limit</code> parameter from the batch processing for the SEO URLs?
Now we do have to implement those, to only generate as many SEO URLs as configured in the batch process.</p>

<pre><code>public function generateSeoUrlAction()
{
    ...

    /** @var QueryBuilder $dbalQueryBuilder */
    $dbalQueryBuilder = $this-&gt;container-&gt;get('dbal_connection')-&gt;createQueryBuilder();
    $words = $dbalQueryBuilder-&gt;select('glossary.id, glossary.word')
        -&gt;from('s_glossary', 'glossary')
        -&gt;setMaxResults($limit)
        -&gt;setFirstResult($offset)
        -&gt;execute()
        -&gt;fetchAll(\PDO::FETCH_KEY_PAIR);

    foreach ($words as $wordId =&gt; $word) {
        $rewriteTableModule-&gt;sInsertUrl('sViewport=glossary&amp;sAction=detail&amp;wordId=' . $wordId, 'glossary/' . $word);
    }

    $this-&gt;View()-&gt;assign(['success' =&gt; true]);
}
</code></pre>

<h3>Add foreign parameters</h3>

<p>While this already looks good, there's one more thing to do.
Shopware needs to know our custom parameter &quot;<strong>wordId</strong>&quot; first.
Otherwise our parameter would just get stripped and our SEO URL wouldn't work.</p>

<p>The possible cases for parameters are handled in the <a href="https://github.com/shopware/shopware/blob/5.3/engine/Shopware/Components/Routing/Generators/RewriteGenerator.php#L166">RewriteGenerator</a>.
It has a whole lot of cases, e.g. the parameter &quot;<strong>sArticle</strong>&quot; is only allowed when used with the <strong>detail</strong> controller.</p>

<p>Thankfully, since Shopware 5.2, this method provides an event to add custom parameters.</p>

<p>So, let's add the event and implement our custom parameter.</p>

<pre><code>public static function getSubscribedEvents()
{
    return [
        ...
        'Shopware_Components_RewriteGenerator_FilterQuery' =&gt; 'filterParameterQuery'
    ];
}
</code></pre>

<pre><code>public function filterParameterQuery(\Enlight_Event_EventArgs $args)
{
    $orgQuery = $args-&gt;getReturn();
    $query = $args-&gt;getQuery();

    if ($query['controller'] === 'glossary' &amp;&amp; isset($query['wordId'])) {
        $orgQuery['wordId'] = $query['wordId'];
    }

    return $orgQuery;
}
</code></pre>

<p>So, what did I do here?
First of all, Shopware doesn't know things like &quot;controllers&quot; or &quot;actions&quot; like that.
Due to legacy reasons, Shopware still needs them to be handled as 'sViewport', which would be the controller, and 'sAction',
which obviously represents action.
That's what <code>$orgQuery</code> contains: The controller mapped to 'sViewport' and the action mapped to the array element 'sAction'.
Since <code>$orgQuery</code> will be used for assembling our SEO URL later, we need to add our parameter to it.</p>

<p>Meanwhile, <code>$query</code> contains the actual request parameters as we know them.</p>

<p>We only need to add our custom parameter <code>wordId</code> if both the controller equals 'glossary' and the parameter itself is set.
In that case, we add <code>wordId</code> to <code>$orgQuery</code> and return it afterwards.</p>

<h2>Example plugin</h2>

<p>You can find the example plugin for <strong>Shopware 5.3</strong> <a href="https://developers.shopware.com/exampleplugins/SeoExample.zip">here</a>.</p>

<p>Just to make sure: <strong>This is not a fully functional plugin as it is only supposed to be an example.</strong>
It will create the necessary plugin table <em>s_glossary</em> with a few example words.
This plugin does not provide a backend module to work with and the frontend templates are very slim to show the basic functionality.</p>

<h3>Shopware 5.2 plugin</h3>

<p>We've also created an example plugin for <strong>Shopware 5.2</strong>, which can be found <a href="https://developers.shopware.com/exampleplugins/SeoExample52.zip">here</a>.</p>

<p>There's several differences, e.g. the whole <em>Resources/views/backend</em> directory is different.
Additional to that, the logic to count the available glossary URLs had to be changed, since the event we used above was implemented with 5.3.</p>
]]></content>
    </entry>
        <entry>
        <title type="html"><![CDATA[Quick Tip: Shopping worlds without AJAX]]></title>
        <link href="https://developers.shopware.com/blog/2017/06/26/quick-tip-shopping-worlds-without-ajax"/>
        <updated>2017-06-26T00:00:00+00:00</updated>
        <id>https://developers.shopware.com/blog/2017/06/26/quick-tip-shopping-worlds-without-ajax</id>
        <content type="html"><![CDATA[<p>Today we're back with a short &amp; simple tip which allows you to load shopping worlds at any place in your store front without the need of loading them using AJAX. Do to so, please create your own frontend theme, if you haven't one in place already. Please refer to our <a href="https://developers.shopware.com/designers-guide/getting-started/#custom-themes">Templating Getting Started Guide</a> on how to create your own custom theme.</p>

<p>After creating your own theme, please create a new JavaScript file in your <code>_public/src/js</code> directory &amp; place the following content into it:</p>

<pre><code>window.StateManager
    .removePlugin('.emotion--wrapper', 'swEmotionLoader')
    .addPlugin('.emotion--wrapper:not(.emotion--non-ajax)', 'swEmotionLoader')
    .addPlugin('.emotion--non-ajax *[data-emotion=&quot;true&quot;]', 'swEmotion');
</code></pre>

<p>We're removing the <code>swEmotionLoader</code> jQuery plugin which is the entry point for an AJAX shopping world. We're removing it because we have to modify the selector for the jQuery plugin. In the next line we're adding the same plugin but with a different selector. The selector allows us to add the class <code>emotion--non-ajax</code> to the element which should contain the shopping world later on. Last but not least, we're adding the jQuery plugin <code>swEmotion</code> to the plugin queue with our <code>emotion--non-ajax</code> class in place.</p>

<p>After you've added the content to the JavaScript file, make sure you've registered the file in the <code>$javascript</code> array in your <code>Theme.php</code> file. If you need further information, please head over to our <a href="https://developers.shopware.com/designers-guide/css-and-js-files-usage/#add-javascript-files">CSS &amp; JS Files Usage Guide</a>.</p>

<p>With these changes in place, you're now able to include shopping worlds literally at any place in your store front with the following code snippet:</p>

<pre><code>&lt;div class=&quot;emotion--wrapper emotion--non-ajax&quot;&gt;
    {action module=&quot;widgets&quot; controller=&quot;emotion&quot; action=&quot;index&quot; emotionId=&quot;7&quot;}
&lt;/div&gt;
</code></pre>

<p>The argument <code>emotionId</code> in the widget call lets you choose what shopping world you would like to include. To get an overview of all available shopping worlds, please refer to the <code>s_core_emotion</code> database table.</p>

<p>You may have to customize the styling of the shopping world, depending on what section of the store front you're using it.</p>
]]></content>
    </entry>
        <entry>
        <title type="html"><![CDATA[Call for papers: Shopware Community Day 2017]]></title>
        <link href="https://developers.shopware.com/blog/2017/03/14/call-for-papers-shopware-community-day-2017"/>
        <updated>2017-03-14T00:00:00+00:00</updated>
        <id>https://developers.shopware.com/blog/2017/03/14/call-for-papers-shopware-community-day-2017</id>
        <content type="html"><![CDATA[<p><a href="https://cfp.shopware.com/"><img src="/blog/img/cfp-scd-2017.png" alt="image" /></a></p>

<p>The <a href="https://scd.shopware.com/">Shopware Community Day</a> is on June 09, and we are looking forward to hear about your <a href="https://cfp.shopware.com/">idea for a talk</a>!</p>

<p>Whatever you want to tell or show the shopware community, don't hesitate to submit your talk. Whatever it is, we will have a look into it.</p>

<p>See you there! :)</p>
]]></content>
    </entry>
    </feed>